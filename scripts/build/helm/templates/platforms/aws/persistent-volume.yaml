{{- if and (eq $.Values.cluster_type "eks") (eq (toString $.Values.couchdb_data.preExistingDataAvailable) "true") }}
{{- if eq (toString .Values.couchdb.clusteredCouchEnabled) "false" }}
# Single node persistent volume for EKS
apiVersion: v1
kind: PersistentVolume
metadata:
  name: couchdb-pv-{{ .Values.namespace }}
spec:
  capacity:
    storage: {{ .Values.ebs.preExistingEBSVolumeSize | default "100Gi" }}  # Fallback for backward compatibility
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: ebs.csi.aws.com
    volumeHandle: {{ index .Values.ebs "preExistingEBSVolumeID-1" }}
    fsType: ext4
    volumeAttributes:
      partition: "{{ .Values.couchdb_data.partition | default "0" }}"  # Fallback for backward compatibility
---
{{- else }}
# Multi-node persistent volumes for EKS
{{- range $i, $e := until (int $.Values.clusteredCouch.noOfCouchDBNodes) }}
{{ $nodeNumber := add $i 1 }}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: couchdb-pv-{{ $.Values.namespace }}-{{ $nodeNumber }}
spec:
  capacity:
    storage: {{ $.Values.couchdb.couchdb_node_storage_size | default "100Mi"}}  # Fallback for backward compatibility
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: ebs.csi.aws.com
    volumeHandle: {{ index $.Values.ebs (printf "preExistingEBSVolumeID-%d" $nodeNumber) }}
    fsType: ext4
    volumeAttributes:
      partition: "{{ $.Values.couchdb_data.partition | default "0" }}"  # Fallback for backward compatibility
---
{{- end }}
{{- end }}
{{- end }}
